
도서 관리 애플리케이션 기능
 1. 도서 등록 ✓
 2. 도서 전체 목록 조회 ✓
 3. 도서 제목 기준 검색 ✓
 4. 도서 번호 기준으로 대여 ✓ / 반납 ✓ / 분실처리 ✓ / 삭제 ✓

도서 데이터
 - 도서번호 (중복되지 않아야 함) ✓
 - 제목 ✓
 - 작가 이름 ✓
 - 페이지 수 ✓
 - 상태 { 대여 가능, 대여중, 도서 정리중, 분실됨 } ✓

요구사항
 - '대여 가능' 인 도서만 대여할 수 있음 ✓
 - 도서가 대여되면 상태가 '대여중'으로 바뀜 ✓
 - 도서가 '대여 가능' 상태가 아닌 경우 해당 도서를 대여할 수 없는 이유 알림 ✓
 - '대여중' 인 도서는 반납할 수 있음 ✓
 - 도서가 반납되면 '도서 정리중'으로 바뀌며, 5분이 지나면 '대여 가능'으로 바뀜 ✓
 - 도서를 분실 처리하면 '분실됨'으로 바뀜 ✓
 - 분실된 도서를 반납 처리하면 도서를 찾은 것으로 간주. 반납과 동일 절차 진행되어야 함 ✓

제약사항
 - 입력은 기본적으로 Console 로 받음 ✓
 - 도서 등록
   1. 애플리케이션 시작 시, 지정한 JSON File 을 읽어 자동 등록 ✓
   2. Console 로 등록한 도서는, 지정한 JSON File 에 저장되어야 함. 재시작 시에 자동으로 등록되어야 함 ✓

코드
 1. Client 클래스 -> library_management 클래스에게 Mode 인터페이스 타입의 인스턴스를 수정자로 의존성을 주입해주는 주체.
 2. book 클래스
 3. library_management 클래스 -> Mode 인터페이스를 직접 의존하는 클래스. 구현 클래스와는 간접 의존으로 낮은 결합도를 가지는 클래스. 객체지향적인 설계?
 4. Mode 인터페이스
    - General 클래스 (인터페이스 구현체)
    - Valid 클래스 (인터페이스 구현체)


설계에 있어 불만족스러운 점
 1. 인터페이스를 도입함으로써 library_management 클래스와 구현클래스의 의존도를 낮추고자 했으나,,
   서비스를 위한 returns 메서드와 테스트를 위한 returns 메서드의 차이가 거의 없음. update 메서드의 적용 여부만 차이남
   재사용성이 좋은 설계에 위반되는 것이 아닐까. 관심사에 대한 분리가 제대로 되지 않아서 그런것인가?

 2.